<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://hualuo2517.github.io/atom.xml" rel="self"/>
  
  <link href="http://hualuo2517.github.io/"/>
  <updated>2024-10-16T13:42:55.340Z</updated>
  <id>http://hualuo2517.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象基础复习</title>
    <link href="http://hualuo2517.github.io/2024/10/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <id>http://hualuo2517.github.io/2024/10/16/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</id>
    <published>2024-10-16T04:00:00.000Z</published>
    <updated>2024-10-16T13:42:55.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-设计对象并使用"><a href="#1-设计对象并使用" class="headerlink" title="1.设计对象并使用"></a>1.设计对象并使用</h2><h5 id="1-1类和对象是什么"><a href="#1-1类和对象是什么" class="headerlink" title="1.1类和对象是什么?"></a>1.1类和对象是什么?</h5><p>类:是共同特征的描述;</p><p>对象:是真实存在的实例;</p><h5 id="1-2如何得到对象"><a href="#1-2如何得到对象" class="headerlink" title="1.2如何得到对象?"></a>1.2如何得到对象?</h5><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20160330.png"></p><h5 id="1-3拿到对象后能做什么"><a href="#1-3拿到对象后能做什么" class="headerlink" title="1.3拿到对象后能做什么?"></a>1.3拿到对象后能做什么?</h5><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20160334.png"></p><blockquote><p>[!NOTE]</p><p>1.类名的首字母建议大写,英文,满足驼峰命名,不能用关键字做类名;</p><p>2.一个代码文件中可以定义多个类,但是只能一个类是public修饰的;</p><p>3.public修饰的类名必须是java代码的文件名称;</p></blockquote><h2 id="2-封装"><a href="#2-封装" class="headerlink" title="2.封装"></a>2.封装</h2><h5 id="1-什么是封装"><a href="#1-什么是封装" class="headerlink" title="1.什么是封装?"></a>1.什么是封装?</h5><p>对象代表什么,就得封装对应的数据,并提供数据对应的行为;</p><p>封装告诉了我们如何正确设计对象的属性和方法;</p><h5 id="2-注意点"><a href="#2-注意点" class="headerlink" title="2,注意点"></a>2,注意点</h5><p>为防止方法调用参数或方法时出现不合理的数据,我们一般修饰属性和方法时用private修饰;</p><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20160634.png"></p><h2 id="3-this关键字"><a href="#3-this关键字" class="headerlink" title="3. this关键字"></a>3. this关键字</h2><p>1.之所以使用this关键字,是因为方法内的形参调用遵从就近原则,如果局部变量和成员变量重名,</p><p>则会导致结果出错,而this.+变量名默认调用成员变量;</p><h2 id="4-构造方法"><a href="#4-构造方法" class="headerlink" title="4.构造方法"></a>4.构造方法</h2><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><p>1.方法名与类名相同,大小也要一致;</p><p>2.没有返回值,连void也没有;</p><p>3.没有具体的返回值(不能由return带回结果数据);</p><p>4.有参构造的好处:可以在创建对象时直接对属性进行赋值;</p><h4 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机:"></a>执行时机:</h4><p>1.创建对象的时候由虚拟机调用,不能手动调用构造方法;</p><p>2.每创建一次对象,就会调用一次构造方法;</p><blockquote><p>[!NOTE]</p><p>1.如果我们自己没有写任何的构造方法,则虚拟机会自动创建一个空参构造方法,反之,系统则不再提供默认的构造方法(如果只创建了有参构造,则调用无参构造就会出错);</p><p>2.无参构造的应用场景:如果需要调用类中的属性,而其还未赋值,则可等其赋值后在方法体中直接调用;</p><p>3.带参构造方法,和无参构造方法,两者方法名相同,但参数不同,这叫做构造方法的重载(建议不论什么情况都写);</p></blockquote><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20163427-1729067767188-2.png"></p><h2 id="5-标准javabean"><a href="#5-标准javabean" class="headerlink" title="5.标准javabean"></a>5.标准javabean</h2><p>1.构造函数快捷键: alt + insert  选择第一个Constructor</p><p>2.get,set方法也可以采取上述办法,也可以下载插件ptg,然后回到界面鼠标右键倒数第三个ptg to javabean一键生成;</p><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20211411.png"></p><h2 id="6-对象内存图"><a href="#6-对象内存图" class="headerlink" title="6.对象内存图"></a>6.对象内存图</h2><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20210717.png"></p><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20211205.png"></p><blockquote><p>[!NOTE]</p><p>栈里面方法的执行顺序,先进后出,后进先出;</p></blockquote><h2 id="7-基础数据类型和引用数据类型"><a href="#7-基础数据类型和引用数据类型" class="headerlink" title="7.基础数据类型和引用数据类型"></a>7.基础数据类型和引用数据类型</h2><h5 id="1-基础数据类型"><a href="#1-基础数据类型" class="headerlink" title="1.基础数据类型:"></a>1.基础数据类型:</h5><p>数据值是存储在自己的空间中的;</p><p>特点:赋值给其他变量,也是赋的真实的值;</p><h5 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型:"></a>2.引用数据类型:</h5><p>数据值是存储在其他空间中,自己空间存储的是地址值;</p><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20211742.png"></p><blockquote><p>[!NOTE]</p><p>注意:数组也是引用数据类型,因为查询数组时需要调用其索引,即数据的地址来查询其数据;</p></blockquote><h2 id="8-this的内存原理"><a href="#8-this的内存原理" class="headerlink" title="8.this的内存原理"></a>8.this的内存原理</h2><h5 id="1-this的作用"><a href="#1-this的作用" class="headerlink" title="1.this的作用:"></a>1.this的作用:</h5><p>区分局部变量和成员变量;</p><h5 id="2-this的本质"><a href="#2-this的本质" class="headerlink" title="2.this的本质:"></a>2.this的本质:</h5><p>代表方法调用者的地址值(非常重要);</p><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20212918.png"></p><h5 id="3-set的原理"><a href="#3-set的原理" class="headerlink" title="3.set的原理"></a>3.set的原理</h5><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20213206.png"></p><h2 id="9-成员和局部"><a href="#9-成员和局部" class="headerlink" title="9.成员和局部"></a>9.成员和局部</h2><h5 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述:"></a>1.概述:</h5><p>成员变量:类中方法外的变量;</p><p>局部变量:方法中的变量;</p><p><img src="/../images/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-10-16%20213754.png"></p><p>注:方法申明指的是方法的形参;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-设计对象并使用&quot;&gt;&lt;a href=&quot;#1-设计对象并使用&quot; class=&quot;headerlink&quot; title=&quot;1.设计对象并使用&quot;&gt;&lt;/a&gt;1.设计对象并使用&lt;/h2&gt;&lt;h5 id=&quot;1-1类和对象是什么&quot;&gt;&lt;a href=&quot;#1-1类和对象是什么&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
